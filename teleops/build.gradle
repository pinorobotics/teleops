
// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:23.0"
  }
}

plugins {
  id 'com.diffplug.spotless'
}

boolean isReleaseBuild() {
  return version != null && version.matches("\\d+[.\\d+]*");
}

apply plugin : 'eclipse'

eclipse.classpath.file {
  // instruct eclipse plugin to put everything to module path
  whenMerged {
    entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
  }
}

dependencies {
  implementation 'io.github.lambdaprime:jros2client:10.0-SNAPSHOT'
  implementation 'io.github.pinorobotics:jros2services:7.0-SNAPSHOT'
}

configurations {
  customConfig.extendsFrom implementation
}

jar {
  manifest { 
    attributes 'Implementation-Version': "${rootProject.version}",
      'Main-Class': 'pinorobotics.teleoptwistkeyboard.TeleopTwistKeyboardApp'
  }
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
  archiveFileName = "$releaseFileName"
  destinationDirectory = file("$projectDir/release")
  from file("$packageDir/..")
}

task copyLibs(type: Copy) {
  from configurations.customConfig 
  from jar.archiveFile
  into "${packageDir}/libs"
}

task copyReadme(type: Copy) {
  from("../README.md")
  into("$buildDir/resources/main")
  rename ("README.md", "README-${projectName}.md")
}

// overwrite template README which comes from resources folder
jar.dependsOn copyReadme

javadoc.enabled = false

task createPackage(type: Copy, dependsOn: [copyLibs]) {
  from "${project.rootDir}/README.md"
  from "${project.rootDir}/LICENSE-2.0.txt"
  from file("$projectDir/src/teleops")
  into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release/*-SNAPSHOT.zip"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply

task updateVersion() {
  // update version only during release build
  if (!isReleaseBuild()) return;
  println "Updating version to " + version
  new id.xfunction.text.Substitutor()
    .withRegexpSupport()
    .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
      "io.github.pinorobotics:teleops:[0-9.]+", "io.github.pinorobotics:teleops:" + version
    ));
}
createRelease.dependsOn updateVersion
